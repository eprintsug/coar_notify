{
no warnings;

package EPrints::DataObj::LDNInbox;

our @ISA = qw( EPrints::DataObj );

sub get_dataset_id { "ldn_inbox" }

sub get_url { shift->uri }

sub find_or_create
{
    my( $class, $session, $id ) = @_;

    my $inbox = $class->search_by_id($session, $id);
    if(!$inbox){
      my $url = $class->get_service_url($session, $id);
      my $inbox_url = $class->discover_inbox($session, $url);
      if($inbox_url)
      {
	      #        $class->create_from_data($session,
	      #		{id => $id,
	      #   endpoint => $inbox_url,
	      #		 #last_accessed => undef, 
	      #   type => "Service"},
	      #$class->get_dataset_id
	      #	);
	$inbox = EPrints::DataObj::LDNInbox->create_from_data(
          $session,
          {
            id => $id,
	    endpoint => $inbox_url,
	    #last_accessed => undef, 
	    type => "Service"
          },
          $class->get_dataset_id
        );

      } else {
        $session->log("LDN Inbox data object was not found and could not be created because the service url does not return a valid inbox endpoint. Service url: ($url)");
	return 0;
      }
    }else{
      print STDERR "Inbox dataobject present... using that\n";
    }
    return $inbox;
}

sub discover_inbox
{

  my( $class, $session, $url ) = @_;

  use HTTP::Link::Parser ':standard';
  use LWP::UserAgent;

  my $ua = LWP::UserAgent->new;
  my $response = $ua->head($url);

  # Parse link headers into an RDF::Trine::Model.
  my $model = parse_links_into_model($response);

  # Find data about <http://example.com/foo>.
  my $iterator = $model->get_statements(
    RDF::Trine::Node::Resource->new($url),
    undef,
    undef);

  while (my $statement = $iterator->next)
  {
     return $statement->object->uri if $statement->predicate->uri eq "http://www.w3.org/ns/ldp#inbox"
  }
  return 0;
}

sub get_service_url
{
    my( $class, $session, $id ) = @_;
    while(my($key, $inbox) = each %{$session->get_conf("ldn_inboxes")}){
      return $inbox->{$id} if($inbox->{$id});
    }

}

sub search_by_id
{
    my( $class, $session, $id ) = @_;

    return $session->dataset( $class->get_dataset_id )->search(
        filters => [{
            meta_fields => [qw( id )],
            value => $id,
            match => "EX",
        }],
        custom_order => "-ldninboxid",
    )->item(0);
}

sub get_defaults
{
	my( $class, $session, $data, $dataset ) = @_;

	$data = $class->SUPER::get_defaults( @_[1..$#_] );

	return $data;
}


} # end of package

$c->{datasets}->{ldn_inbox} = {
	class => "EPrints::DataObj::LDNInbox",
	sqlname => "ldn_inbox",
	name => "ldn_inbox",
	columns => [qw( ldninboxid )],
	index => 1,
	import => 1,
	search => {                
		simple => {
                        search_fields => [{
                                id => "q",
                                meta_fields => [qw(
					ldninboxid
                                )],
                        }],
                        show_zero_results => 1,
                },
        },
};

unshift @{$c->{fields}->{ldn_inbox}}, (

        { name =>"ldninboxid", type=>"counter", required=>1, import=>0, show_in_html=>0, can_clone=>0, sql_counter=>"ldninboxid" },
        { name => "id", type => "text" },  # e.g. pci_evolbiol
        { name => "endpoint", type => "url" },
        { name => "last_accessed", type=>"time", required=>0, },
        { name => "type", type => "text" },
);
